apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: open-telemetry
  namespace: flux-system
spec:
  interval: 6h
  url: https://open-telemetry.github.io/opentelemetry-helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: opentelemetry-collector
  namespace: flux-system
spec:
  interval: 6h
  releaseName: open-telemetry
  targetNamespace: opentelemetry
  chart:
    spec:
      chart: opentelemetry-collector
      version: 0.108.0
      interval: 6h
      sourceRef:
        kind: HelmRepository
        name: open-telemetry
  values:
    mode: deployment
    fullnameOverride: otel-collector
    resources:
      limits:
        cpu: '100m'
        memory: '512Mi'
    presets:
      kubernetesAttributes:
        enabled: true
      # Configures the collector to collect node, pod, and container metrics from the API server on a kubelet.
      kubeletMetrics:
        enabled: true
      # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
      clusterMetrics:
        enabled: true
    image:
      repository: otel/opentelemetry-collector-contrib
      tag: 0.108.0
    config:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: ${env:MY_POD_IP}:4317
            http:
              endpoint: ${env:MY_POD_IP}:4318
        k8s_cluster:
          collection_interval: 1m # default is 10s
        kubeletstats:
          collection_interval: 1m # default is 10s
        prometheus:
          config:
            global:
              scrape_interval: 1m
            scrape_configs:
              - job_name: opentelemetry-collector
                static_configs:
                - targets:
                  - ${env:MY_POD_IP}:8888
              - job_name: aio-annotated-pod-metrics
                kubernetes_sd_configs:
                - role: pod
                relabel_configs:
                - action: drop
                  regex: true
                  source_labels:
                  - __meta_kubernetes_pod_container_init
                - action: keep
                  regex: true
                  source_labels:
                  - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                - action: replace
                  regex: ([^:]+)(?::\\d+)?;(\\d+)
                  replacement: $1:$2
                  source_labels:
                  - __address__
                  - __meta_kubernetes_pod_annotation_prometheus_io_port
                  target_label: __address__
                - action: replace
                  source_labels:
                  - __meta_kubernetes_namespace
                  target_label: kubernetes_namespace
                - action: keep
                  regex: 'azure-iot-operations'
                  source_labels:
                  - kubernetes_namespace
      exporters:
        prometheus:
          endpoint: ':8889'
          resource_to_telemetry_conversion:
            enabled: true
        debug:
          verbosity: basic
        prometheusremotewrite:
          endpoint: 'http://prometheus-server.edge-observability/api/v1/write'
          resource_to_telemetry_conversion:
            enabled: true
        otlp/tempo:
          endpoint: 'grafana-tempo.edge-observability:4317'
          tls:
            insecure: true
        loki:
          endpoint: 'http://grafana-loki.edge-observability:3100/loki/api/v1/push'
      processors:
        resource:
          attributes:
            - key: deployment.environment
              value: DEV
              action: insert
        batch: {}
        memory_limiter:
          limit_percentage: 80
          spike_limit_percentage: 10
          check_interval: '60s'
      service:
        extensions:
          - health_check
        telemetry:
          metrics:
            address: ${env:MY_POD_IP}:8888
        pipelines:
          logs:
            processors:
              - memory_limiter
              - resource
              - k8sattributes
              - batch
            exporters:
              - loki
              - debug
          metrics:
            receivers:
              - otlp
              - prometheus
              - kubeletstats
              - k8s_cluster
            processors:
              - memory_limiter
              - resource
              - k8sattributes
              - batch
            exporters:
              - prometheus
              - prometheusremotewrite
              - debug
          traces:
            processors:
              - memory_limiter
              - resource
              - k8sattributes
              - batch
            exporters:
              - otlp/tempo
              - debug
    ports:
      jaeger-compact:
        enabled: false
      jaeger-grpc:
        enabled: false
      jaeger-thrift:
        enabled: false
      metrics:
        enabled: true
        containerPort: 8889
        servicePort: 8889
        protocol: 'TCP'
      zipkin:
        enabled: false
